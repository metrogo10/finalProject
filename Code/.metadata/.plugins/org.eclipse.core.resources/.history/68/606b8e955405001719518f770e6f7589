package controls;
import java.util.ArrayList;
import Characters.Enemy;
import Characters.Player;
import Math.LongValue;
import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.fxml.FXML;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Button;
import javafx.stage.Stage;
public class Combat extends Application
{
	ArrayList<Enemy> encounter;
	Player p;
	Enemy e;
	Boolean Combat=true;
	public Combat(Enemy E, Player p)
	{
		this.e=E;
		e.GenerateEncounter();
		encounter=e.getEncounter();
		this.p=p;
	}
	public boolean fight()
	{
		start(theStage);
		do{
			if(win())
			{
				p.GainExp(Experiance());
				Combat=false;
			}
			if (p.getHp()<=0)
			{
				Combat=false;
			}
		}while(Combat);
		return win();
	}
	public Player getP()
	{
		return p;
	}
	private int Experiance()
	{
		int expgain=0;
		for(int i=0;i<encounter.size();i++)
		{
			int x=encounter.get(i).getLvl()-p.getLvl()+encounter.get(i).getExp();
			int y=(p.getLvl()-encounter.get(x).getLvl())*-1;
			if(y>0)
			{
				y+=1;
				x*=y;
			}
			if (y<0)
			{
				y-=1;
				x/=y;
			}
			if(x<=0)
			{
				x+=1;
			}
			expgain+=x;
		}
		return expgain;
	}
	private boolean win()
	{
		boolean win = false;
		int x=0;
		for (int i=0;i<encounter.size();i++)
		{
			if (encounter.get(i).getHp()<=0)
			{
				x++;
			}
		}
		if(x==encounter.size())
		{
			win=true;
		}
		return win;
	}
	@Override
	public void start(Stage theStage)
	{
		theStage.setTitle("CRYSTAL CAVERNS");
        Group root = new Group();
        Scene theScene = new Scene( root );
        theStage.setScene( theScene );
        Canvas canvas = new Canvas( 512, 512 );
        root.getChildren().add( canvas );
        //
        GraphicsContext gc = canvas.getGraphicsContext2D();
        Sprite attack= new Sprite();
        attack.setImage("/Pictures/Attack.png");
        attack.setPosition(0, 0);
        p.setPosition(36, 380);
        e.setPosition(380, 380);
        LongValue lastNanoTime = new LongValue(System.nanoTime());
        new AnimationTimer()
        {
        	  public void handle(long currentNanoTime)
        	    {
        	        double elapsedTime = (currentNanoTime - lastNanoTime.value) / 1000000000.0;
        	        lastNanoTime.value = currentNanoTime;
        	        gc.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());
        	        attack.render(gc);
        	        p.render(gc);
        	        e.render(gc);
        	    }
        }.start();
        theStage.show();
	}
}