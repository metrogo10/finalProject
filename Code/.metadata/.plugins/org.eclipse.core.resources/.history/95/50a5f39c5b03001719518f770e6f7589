package FX;
import java.util.ArrayList;

import Characters.Player;
import controls.Sprite;
import controls.gameEngine;
import javafx.animation.AnimationTimer;
import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.input.KeyEvent;
import javafx.stage.Stage;
public class window extends Application
{
	    public static void main(String[] args)
	    {
	    	gameEngine G = new gameEngine();
	        launch(args);
	    }
	    public void start(Stage theStage)
	    {
	        theStage.setTitle("CRYSTAL CAVERNS");
	        Group root = new Group();
	        Scene theScene = new Scene( root );
	        theStage.setScene( theScene );
	        Canvas canvas = new Canvas( 512, 512 );
	        root.getChildren().add( canvas );
	        ArrayList<String> input = new ArrayList<String>();
	        theScene.setOnKeyPressed(
	            new EventHandler<KeyEvent>()
	            {
	                public void handle(KeyEvent e)
	                {
	                    String code = e.getCode().toString();
	                    if ( !input.contains(code) )
	                        input.add( code );
	                }
	            });
	        theScene.setOnKeyReleased(
	            new EventHandler<KeyEvent>()
	            {
	                public void handle(KeyEvent e)
	                {
	                    String code = e.getCode().toString();
	                    input.remove( code );
	                }
	            });
	        ArrayList<Sprite> Characters = new ArrayList<Sprite>();
	        for (int i = 0; i < 15; i++)
	        {
	        }
	        new AnimationTimer()
	        {
	        	  public void handle(long currentNanoTime)
	        	    {
	        		  	long lastNanoTime = new Long(System.nanoTime());
	        	        double elapsedTime = (currentNanoTime - lastNanoTime) / 1000000000.0;
	        	        lastNanoTime = currentNanoTime;
	        	        p.setVelocity(0,0);
	        	        if (input.contains("LEFT"))
	        	            p.addVelocity(-50,0);
	        	        if (input.contains("RIGHT"))
	        	            p.addVelocity(50,0);
	        	        if (input.contains("UP"))
	        	            p.addVelocity(0,-50);
	        	        if (input.contains("DOWN"))
	        	           p.addVelocity(0,50);
	        	        p.update(elapsedTime);
	            }
	        }.start();
	        theStage.show();
	    }
	}